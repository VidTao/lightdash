version: "3.8"
services:
  # Add nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: lightdash-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl-certs:/etc/nginx/ssl
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - lightdash
    restart: unless-stopped

  lightdash:
    platform: linux/amd64
    build:
      context: .
      dockerfile: dockerfile
      target: prod
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      headless-browser:
        condition: service_started
    environment:
      - NODE_ENV=${NODE_ENV}
      - PGHOST=${PGHOST}
      - PGPORT=${PGPORT}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGDATABASE=${PGDATABASE}
      - SECURE_COOKIES=${SECURE_COOKIES:-true}
      - TRUST_PROXY=${TRUST_PROXY:-true}
      - LIGHTDASH_SECRET=${LIGHTDASH_SECRET:-your-secret-key-here-change-this}
      - PORT=${PORT}
      - LIGHTDASH_LOG_LEVEL=${LIGHTDASH_LOG_LEVEL:-info}
      - LIGHTDASH_INSTALL_ID=${LIGHTDASH_INSTALL_ID}
      - LIGHTDASH_INSTALL_TYPE=docker_compose
      - LIGHTDASH_LICENSE_KEY=${LIGHTDASH_LICENSE_KEY}
      - AUTH_DISABLE_PASSWORD_AUTHENTICATION=${AUTH_DISABLE_PASSWORD_AUTHENTICATION:-false}
      - AUTH_ENABLE_GROUP_SYNC=${AUTH_ENABLE_GROUP_SYNC:-false}
      - AUTH_GOOGLE_ENABLED=${AUTH_GOOGLE_ENABLED:-false}
      - AUTH_GOOGLE_OAUTH2_CLIENT_ID=${AUTH_GOOGLE_OAUTH2_CLIENT_ID}
      - AUTH_GOOGLE_OAUTH2_CLIENT_SECRET=${AUTH_GOOGLE_OAUTH2_CLIENT_SECRET}
      - SITE_URL=${SITE_URL:-https://v2.bratrax.com}
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT}
      - EMAIL_SMTP_SECURE=${EMAIL_SMTP_SECURE}
      - EMAIL_SMTP_USE_AUTH=${EMAIL_SMTP_USE_AUTH}
      - EMAIL_SMTP_USER=${EMAIL_SMTP_USER}
      - EMAIL_SMTP_PASSWORD=${EMAIL_SMTP_PASSWORD}
      - EMAIL_SMTP_ALLOW_INVALID_CERT=${EMAIL_SMTP_ALLOW_INVALID_CERT}
      - EMAIL_SMTP_SENDER_NAME=${EMAIL_SMTP_SENDER_NAME}
      - EMAIL_SMTP_SENDER_EMAIL=${EMAIL_SMTP_SENDER_EMAIL}
      - ALLOW_MULTIPLE_ORGS=${ALLOW_MULTIPLE_ORGS:-false}
      - LIGHTDASH_QUERY_MAX_LIMIT=${LIGHTDASH_QUERY_MAX_LIMIT}
      - LIGHTDASH_MAX_PAYLOAD=${LIGHTDASH_MAX_PAYLOAD:-5mb}
      - HEADLESS_BROWSER_HOST=${HEADLESS_BROWSER_HOST}
      - HEADLESS_BROWSER_PORT=${HEADLESS_BROWSER_PORT}
      - USE_SECURE_BROWSER=${USE_SECURE_BROWSER:-false}
      - RUDDERSTACK_WRITE_KEY=${RUDDERSTACK_WRITE_KEY}
      - RUDDERSTACK_DATA_PLANE_URL=${RUDDERSTACK_DATA_PLANE_URL}
      - SCHEDULER_ENABLED=${SCHEDULER_ENABLED:-true}
      - GROUPS_ENABLED=${GROUPS_ENABLED:-false}
      - POSTHOG_PROJECT_API_KEY=${POSTHOG_PROJECT_API_KEY}
      - POSTHOG_FE_API_HOST=${POSTHOG_FE_API_HOST}
      - POSTHOG_BE_API_HOST=${POSTHOG_BE_API_HOST}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - AI_COPILOT_ENABLED=${AI_COPILOT_ENABLED:-false}
      - AI_COPILOT_EMBEDDING_SEARCH_ENABLED=${AI_COPILOT_EMBEDDING_SEARCH_ENABLED:-false}
      - GOOGLE_DRIVE_API_KEY=${GOOGLE_DRIVE_API_KEY}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
      - SLACK_CLIENT_ID=${SLACK_CLIENT_ID}
      - SLACK_CLIENT_SECRET=${SLACK_CLIENT_SECRET}
      - SLACK_STATE_SECRET=${SLACK_STATE_SECRET}
      - GITHUB_PRIVATE_KEY=${GITHUB_PRIVATE_KEY}
      - GITHUB_APP_ID=${GITHUB_APP_ID}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - GITHUB_APP_NAME=${GITHUB_APP_NAME}
      - GITHUB_REDIRECT_DOMAIN=${GITHUB_REDIRECT_DOMAIN}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_REGION=${S3_REGION}
      - S3_BUCKET=${S3_BUCKET}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_FORCE_PATH_STYLE=true
      - S3_EXPIRATION_TIME=${S3_EXPIRATION_TIME}
      - RESULTS_S3_REGION=${RESULTS_S3_REGION}
      - RESULTS_S3_BUCKET=${RESULTS_S3_BUCKET}
      - RESULTS_S3_SECRET_KEY=${RESULTS_S3_SECRET_KEY}
      - RESULTS_S3_ACCESS_KEY=${RESULTS_S3_ACCESS_KEY}
    volumes:
      - "${DBT_PROJECT_DIR:-./examples/full-jaffle-shop-demo/dbt}:/usr/app/dbt"
      - "./credentials/bratrax-78c5b6786fc2.json:/usr/app/bigquery-credentials.json"
    # Remove external port mapping - nginx will handle this
    expose:
      - "3000"
    restart: unless-stopped
    entrypoint: ["dumb-init", "--"]
    command:
      [
        "sh",
        "-c",
        "echo 'Waiting for database...' && sleep 20 && cd /usr/app && pnpm -F backend migrate-production && cd /usr/app/packages/backend && node dist/index.js",
      ]

  db:
    image: postgres:15.4
    restart: always 
    environment:
      POSTGRES_PASSWORD: ${PGPASSWORD:-password}
      POSTGRES_USER: ${PGUSER:-postgres}
      POSTGRES_DB: ${PGDATABASE:-postgres}
      POSTGRES_INITDB_ARGS: "--auth-host=md5 --auth-local=md5"
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER:-postgres} -d ${PGDATABASE:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  headless-browser:
    image: ghcr.io/browserless/chromium:v2.24.3
    restart: always
    expose:
      - "3000"
    environment:
      - CONCURRENT=10
      - TOKEN=
    # Remove health check since /health endpoint doesn't exist
    # Just wait for the service to start

  minio:
    image: bitnami/minio:latest  # ‚Üê Supports MINIO_DEFAULT_BUCKETS
    expose:
      - "9000"
      - "9001"
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DEFAULT_BUCKETS=${MINIO_DEFAULT_BUCKETS}
    # command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  db-data:
  minio-data:
